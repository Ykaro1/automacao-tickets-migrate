"""
Script para an√°lise de tickets e integra√ß√£o com Gemini e Slack.
"""

import os
import json
import logging
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import google.generativeai as genai
import requests
from dotenv import load_dotenv
import subprocess

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o do Gemini
genai.configure(api_key=os.getenv("GOOGLE_AI_API_KEY"))

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/analise_tickets.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class TicketAnalyzer:
    def __init__(self):
        self.memory_file = Path("data/ticket_memory.json")
        self.autores_internos = os.getenv("AUTORES_INTERNOS", "").split(",")
        self.slack_webhook = os.getenv("SLACK_WEBHOOK_URL")
        self.slack_channel = os.getenv("SLACK_CHANNEL") # Canal para notifica√ß√µes de tickets
        self.slack_file_update_channel = os.getenv("SLACK_FILE_UPDATE_CHANNEL") # Canal para notifica√ß√£o de atualiza√ß√£o do JSON
        
        # Garante que o diret√≥rio data existe
        self.memory_file.parent.mkdir(exist_ok=True)
        
        # Carrega ou cria arquivo de mem√≥ria
        self.memory = self._load_memory()
        logging.info(f"Mem√≥ria carregada com {len(self.memory)} tickets")
    
    def _load_memory(self) -> Dict[str, Any]:
        """Carrega o arquivo de mem√≥ria ou cria um novo se n√£o existir."""
        try:
            if self.memory_file.exists():
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logging.error(f"Erro ao carregar mem√≥ria: {str(e)}")
            return {}
    
    def _save_memory(self):
        """Salva o arquivo de mem√≥ria, faz commit, push e notifica no canal espec√≠fico sobre a atualiza√ß√£o."""
        # Salva o arquivo
        with open(self.memory_file, 'w', encoding='utf-8') as f:
            json.dump(self.memory, f, ensure_ascii=False, indent=2)
        
        # Configura o Git
        try:
            # Configura o usu√°rio do Git
            subprocess.run(['git', 'config', '--global', 'user.email', 'github-actions@github.com'], check=True)
            subprocess.run(['git', 'config', '--global', 'user.name', 'GitHub Actions'], check=True)
            
            # Adiciona o arquivo de mem√≥ria
            subprocess.run(['git', 'add', str(self.memory_file)], check=True)
            
            # Verifica se h√° mudan√ßas para commitar
            result = subprocess.run(['git', 'diff', '--staged', '--quiet'], capture_output=True)
            if result.returncode == 1:  # C√≥digo 1 indica que h√° mudan√ßas
                # Faz o commit
                commit_message = f'chore: atualiza mem√≥ria de tickets - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
                subprocess.run(['git', 'commit', '-m', commit_message], check=True)
                
                # Faz o push
                subprocess.run(['git', 'push'], check=True)
                logging.info("Mem√≥ria atualizada e enviada para o GitHub")
                
                # Envia notifica√ß√£o sobre a atualiza√ß√£o do arquivo para o canal espec√≠fico
                repo_url = f"{os.getenv('GITHUB_SERVER_URL', 'https://github.com')}/{os.getenv('GITHUB_REPOSITORY')}"
                update_message = f"‚úÖ O arquivo `ticket_memory.json` foi atualizado no reposit√≥rio.\nConsulte as altera√ß√µes em: {repo_url}/commits"
                self._send_to_slack(update_message, channel_override=self.slack_file_update_channel)

            else:
                logging.info("Nenhuma mudan√ßa na mem√≥ria para commitar")
                
        except subprocess.CalledProcessError as e:
            logging.error(f"Erro ao salvar mem√≥ria no GitHub: {str(e)}")
    
    def _get_last_action(self, actions_text: str) -> Optional[str]:
        """Extrai a √∫ltima a√ß√£o do texto de a√ß√µes."""
        if not actions_text:
            return None
            
        # Divide o texto em a√ß√µes numeradas
        actions = actions_text.split("-----------------------------")
        
        # Encontra a √∫ltima a√ß√£o (maior n√∫mero)
        last_action = None
        max_number = 0
        
        for action in actions:
            if not action.strip():
                continue
                
            # Procura o n√∫mero da a√ß√£o
            try:
                number = int(action.split(" - ")[0].split(" ")[-1])
                if number > max_number:
                    max_number = number
                    last_action = action.strip()
            except (ValueError, IndexError):
                continue
        
        return last_action
    
    def _format_with_gemini(self, text: str) -> str:
        """Formata o texto usando o Gemini."""
        try:
            model = genai.GenerativeModel('gemini-2.0-flash')
            response = model.generate_content(
                f"Formate o seguinte texto de forma clara e organizada, removendo assinaturas e informa√ß√µes desnecess√°rias:\n\n{text}"
            )
            return response.text
        except Exception as e:
            logging.error(f"Erro ao formatar com Gemini: {str(e)}")
            return text
    
    def _send_to_slack(self, message: str, channel_override: Optional[str] = None):
        """Envia mensagem para o Slack. Permite a sobreposi√ß√£o do canal."""
        if not self.slack_webhook:
            logging.error("Webhook do Slack n√£o configurado")
            return
            
        # Determina o canal de destino: usa o override se fornecido, sen√£o o padr√£o.
        target_channel = channel_override if channel_override else self.slack_channel
        if not target_channel:
            logging.error("Nenhum canal do Slack especificado para a notifica√ß√£o.")
            return

        try:
            payload = {
                "channel": target_channel,
                "text": message,
                "username": "Monitor de Tickets",
                "icon_emoji": ":ticket:"
            }
            
            response = requests.post(
                self.slack_webhook,
                json=payload
            )
            
            if response.status_code != 200:
                logging.error(f"Erro ao enviar para Slack: {response.text}")
                
        except Exception as e:
            logging.error(f"Erro ao enviar para Slack: {str(e)}")
    
    def _is_internal_author(self, action_text: str) -> bool:
        """Verifica se a a√ß√£o √© de um autor interno."""
        for autor in self.autores_internos:
            if autor.strip() in action_text:
                logging.info(f"A√ß√£o √© de autor interno: {autor}")
                return True
        return False
    
    def analyze_tickets(self, csv_file: str):
        """
        Analisa os tickets do arquivo CSV com l√≥gica aprimorada para notifica√ß√µes e limpeza de mem√≥ria.
        """
        try:
            # 1. LER DADOS COMPLETOS
            # L√™ o CSV sem filtrar por status para garantir que vejamos as a√ß√µes de fechamento.
            df = pd.read_csv(
                csv_file,
                encoding='latin1',
                sep=';',
                on_bad_lines='warn',
                engine='python',
                quoting=0,
                dtype={
                    'N√∫mero': str,
                    'Status': str,
                    'A√ß√µes': str
                }
            )
            logging.info(f"CSV completo lido com {len(df)} tickets")

            # 2. PREPARAR MEM√ìRIA
            new_memory = {}
            tickets_com_mudanca = False
            tickets_notificados = 0

            # 3. PROCESSAR CADA TICKET INDIVIDUALMENTE
            for _, ticket in df.iterrows():
                ticket_id = str(ticket['N√∫mero'])
                last_action_date = ticket['Data da √∫ltima a√ß√£o']
                status = ticket['Status']
                actions = ticket['A√ß√µes']
                
                last_action = self._get_last_action(actions)
                if not last_action:
                    continue

                # L√≥gica de Notifica√ß√£o para tickets existentes
                if ticket_id in self.memory:
                    if self.memory[ticket_id]['last_action_date'] != last_action_date:
                        logging.info(f"Ticket #{ticket_id} (Status: {status}) tem nova a√ß√£o.")
                        tickets_com_mudanca = True
                        if not self._is_internal_author(last_action):
                            formatted_text = self._format_with_gemini(last_action)
                            message = (
                                f"üîÑ *Atualiza√ß√£o no Ticket #{ticket_id}*\n"
                                f"*Respons√°vel:* {ticket['Respons√°vel']}\n"
                                f"*Cliente:* {ticket['Cliente (Pessoa)']}\n"
                                f"*Status:* {status}\n"
                                f"*√öltima A√ß√£o:*\n{formatted_text}"
                            )
                            self._send_to_slack(message)
                            tickets_notificados += 1
                # L√≥gica de Notifica√ß√£o para tickets novos
                elif status not in ['Fechado', 'Resolvido']:
                    logging.info(f"Novo ticket #{ticket_id} encontrado.")
                    tickets_com_mudanca = True
                    if not self._is_internal_author(last_action):
                        formatted_text = self._format_with_gemini(last_action)
                        message = (
                            f"‚ú® *Novo Ticket #{ticket_id}*\n"
                            f"*Respons√°vel:* {ticket['Respons√°vel']}\n"
                            f"*Cliente:* {ticket['Cliente (Pessoa)']}\n"
                            f"*Status:* {status}\n"
                            f"*√öltima A√ß√£o:*\n{formatted_text}"
                        )
                        self._send_to_slack(message)
                        tickets_notificados += 1

                # 4. L√ìGICA DE GEST√ÉO DA MEM√ìRIA
                # Adiciona o ticket na nova mem√≥ria SOMENTE se ele n√£o estiver fechado/resolvido.
                if status not in ['Fechado', 'Resolvido']:
                    new_memory[ticket_id] = {
                        'last_action_date': last_action_date,
                        'last_action': last_action
                    }

            # 5. ATUALIZAR E SALVAR A MEM√ìRIA
            # Verifica se a nova mem√≥ria √© diferente da antiga para evitar commits desnecess√°rios.
            if self.memory != new_memory:
                logging.info("Mem√≥ria de tickets foi alterada. Salvando novo estado.")
                self.memory = new_memory
                self._save_memory()
            else:
                logging.info("Nenhuma mudan√ßa na mem√≥ria de tickets ativos.")

            # Log final
            logging.info(f"""
            Resumo da an√°lise:
            - Total de tickets processados: {len(df)}
            - Tickets ativos na mem√≥ria: {len(new_memory)}
            - Tickets com mudan√ßa: {tickets_com_mudanca}
            - Tickets notificados: {tickets_notificados}
            """)

            return True

        except Exception as e:
            logging.error(f"Erro ao analisar tickets: {str(e)}")
            return False

def main():
    """Fun√ß√£o principal."""
    try:
        analyzer = TicketAnalyzer()
        analyzer.analyze_tickets("downloads/file.csv")
        logging.info("An√°lise de tickets conclu√≠da com sucesso")
        
    except Exception as e:
        logging.error(f"Erro na execu√ß√£o: {str(e)}")
        raise

if __name__ == "__main__":
    main() 