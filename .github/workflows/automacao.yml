name: Automação Tickets Migrate

on:
  schedule:
    - cron: '0 8 * * *'  # Executa todos os dias às 8h
  workflow_dispatch:  # Permite execução manual

jobs:
  automacao:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
    
    - name: Configurar Python com cache
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Instalar Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg2
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version
    
    - name: Instalar ChromeDriver compatível
      run: |
        # Obter a versão completa do Chrome instalado
        CHROME_VERSION=$(google-chrome --version)
        echo "Versão do Chrome encontrada: $CHROME_VERSION"

        # Extrair a versão exata para o driver (ex: 125.0.6422.141)
        CHROME_DRIVER_VERSION=$(echo "$CHROME_VERSION" | awk '{print $3}')
        echo "Versão compatível do ChromeDriver para baixar: $CHROME_DRIVER_VERSION"

        # Baixar a versão correspondente do ChromeDriver
        wget -q "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_DRIVER_VERSION/linux64/chromedriver-linux64.zip"
        
        unzip chromedriver-linux64.zip
        sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        chromedriver --version
    
    - name: Instalar dependências Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip list
    
    - name: Criar arquivo .env com secrets
      run: |
        echo "MIGRATE_EMAIL=${{ secrets.MIGRATE_EMAIL }}" >> .env
        echo "MIGRATE_SENHA=${{ secrets.MIGRATE_SENHA }}" >> .env
    
    - name: Criar diretório de downloads
      run: mkdir -p downloads
    
    - name: Executar automação com Selenium
      run: |
        python automacao_selenium.py
        ls -la downloads/
    
    - name: Fazer upload do arquivo Excel gerado
      uses: actions/upload-artifact@v4
      with:
        name: tickets-excel
        path: downloads/*.xlsx
        if-no-files-found: warn
    
    - name: Fazer upload do screenshot em caso de erro
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-screenshot
        path: downloads/erro*.png
        if-no-files-found: warn
