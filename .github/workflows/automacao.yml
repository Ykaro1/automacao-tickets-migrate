name: Automação de Tickets

on:
  schedule:
    - cron: '0 */4 * * *'  # Roda a cada 4 horas
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Executar em modo debug'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.11'
  CHROME_VERSION: '137.0.7151.70'
  CHROMEDRIVER_VERSION: '137.0.7151.70'

jobs:
  automacao:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Permissão para fazer push
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necessário para o git push funcionar
      
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyarrow  # Instala pyarrow para evitar o aviso do pandas
      
      - name: Configurar Chrome
        run: |
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || true
          sudo apt-get update
          sudo apt-get install -y -f
          google-chrome --version
      
      - name: Configurar ChromeDriver
        run: |
          wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${{ env.CHROME_VERSION }}/linux64/chromedriver-linux64.zip"
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version
      
      - name: Criar diretórios necessários
        run: |
          mkdir -p downloads
          mkdir -p logs
          mkdir -p data
      
      - name: Executar automação
        env:
          MIGRATE_EMAIL: ${{ secrets.MIGRATE_EMAIL }}
          MIGRATE_SENHA: ${{ secrets.MIGRATE_SENHA }}
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          AUTORES_INTERNOS: ${{ secrets.AUTORES_INTERNOS }}
          DEBUG_MODE: ${{ inputs.debug_mode }}
        run: |
          python automacao_selenium.py
          python analisador_tickets.py
      
      - name: Verificar arquivos gerados
        run: |
          if [ ! -f "downloads/file.csv" ]; then
            echo "❌ Arquivo CSV não foi gerado"
            exit 1
          fi
          echo "✅ Arquivo CSV gerado com sucesso"
      
      - name: Limpar arquivos temporários
        if: always()
        run: |
          rm -f downloads/file.xlsx  # Remove apenas o XLSX, mantém o CSV
          rm -f screenshots/* 2>/dev/null || true
